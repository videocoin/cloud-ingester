// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: userprofile_service.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		userprofile_service.proto

	It has these top-level messages:
		UserCaps
		UserProfileRequest
		GetUserByIDRequest
		UserProfileResponse
		OAuth2TokenRequest
		OAuth2TokenResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type UserCaps struct {
	EventsInProcessMaxCount uint32   `protobuf:"varint,1,opt,name=events_in_process_max_count,json=eventsInProcessMaxCount,proto3" json:"events_in_process_max_count,omitempty" db:"events_in_process_max_count"`
	FileUploadMaxSize       uint32   `protobuf:"varint,2,opt,name=file_upload_max_size,json=fileUploadMaxSize,proto3" json:"file_upload_max_size,omitempty" db:"file_upload_max_size"`
	FilesEventMaxCount      uint32   `protobuf:"varint,3,opt,name=files_event_max_count,json=filesEventMaxCount,proto3" json:"files_event_max_count,omitempty" db:"files_event_max_count"`
	PlatformsEventMaxCount  uint32   `protobuf:"varint,4,opt,name=platforms_event_max_count,json=platformsEventMaxCount,proto3" json:"platforms_event_max_count,omitempty" db:"platforms_event_max_count"`
	IsViewportingEnabled    bool     `protobuf:"varint,5,opt,name=is_viewporting_enabled,json=isViewportingEnabled,proto3" json:"is_viewporting_enabled,omitempty" db:"is_viewporting_enabled"`
	PlatformIds             []string `protobuf:"bytes,6,rep,name=platform_ids,json=platformIds" json:"platform_ids,omitempty"`
}

func (m *UserCaps) Reset()                    { *m = UserCaps{} }
func (m *UserCaps) String() string            { return proto1.CompactTextString(m) }
func (*UserCaps) ProtoMessage()               {}
func (*UserCaps) Descriptor() ([]byte, []int) { return fileDescriptorUserprofileService, []int{0} }

func (m *UserCaps) GetEventsInProcessMaxCount() uint32 {
	if m != nil {
		return m.EventsInProcessMaxCount
	}
	return 0
}

func (m *UserCaps) GetFileUploadMaxSize() uint32 {
	if m != nil {
		return m.FileUploadMaxSize
	}
	return 0
}

func (m *UserCaps) GetFilesEventMaxCount() uint32 {
	if m != nil {
		return m.FilesEventMaxCount
	}
	return 0
}

func (m *UserCaps) GetPlatformsEventMaxCount() uint32 {
	if m != nil {
		return m.PlatformsEventMaxCount
	}
	return 0
}

func (m *UserCaps) GetIsViewportingEnabled() bool {
	if m != nil {
		return m.IsViewportingEnabled
	}
	return false
}

func (m *UserCaps) GetPlatformIds() []string {
	if m != nil {
		return m.PlatformIds
	}
	return nil
}

type UserProfileRequest struct {
	// Types that are valid to be assigned to T:
	//	*UserProfileRequest_Token
	//	*UserProfileRequest_Bearer
	T isUserProfileRequest_T `protobuf_oneof:"t"`
}

func (m *UserProfileRequest) Reset()         { *m = UserProfileRequest{} }
func (m *UserProfileRequest) String() string { return proto1.CompactTextString(m) }
func (*UserProfileRequest) ProtoMessage()    {}
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUserprofileService, []int{1}
}

type isUserProfileRequest_T interface {
	isUserProfileRequest_T()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserProfileRequest_Token struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}
type UserProfileRequest_Bearer struct {
	Bearer string `protobuf:"bytes,2,opt,name=bearer,proto3,oneof"`
}

func (*UserProfileRequest_Token) isUserProfileRequest_T()  {}
func (*UserProfileRequest_Bearer) isUserProfileRequest_T() {}

func (m *UserProfileRequest) GetT() isUserProfileRequest_T {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *UserProfileRequest) GetToken() string {
	if x, ok := m.GetT().(*UserProfileRequest_Token); ok {
		return x.Token
	}
	return ""
}

func (m *UserProfileRequest) GetBearer() string {
	if x, ok := m.GetT().(*UserProfileRequest_Bearer); ok {
		return x.Bearer
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserProfileRequest) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _UserProfileRequest_OneofMarshaler, _UserProfileRequest_OneofUnmarshaler, _UserProfileRequest_OneofSizer, []interface{}{
		(*UserProfileRequest_Token)(nil),
		(*UserProfileRequest_Bearer)(nil),
	}
}

func _UserProfileRequest_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*UserProfileRequest)
	// t
	switch x := m.T.(type) {
	case *UserProfileRequest_Token:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		_ = b.EncodeStringBytes(x.Token)
	case *UserProfileRequest_Bearer:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		_ = b.EncodeStringBytes(x.Bearer)
	case nil:
	default:
		return fmt.Errorf("UserProfileRequest.T has unexpected type %T", x)
	}
	return nil
}

func _UserProfileRequest_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*UserProfileRequest)
	switch tag {
	case 1: // t.token
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.T = &UserProfileRequest_Token{x}
		return true, err
	case 2: // t.bearer
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.T = &UserProfileRequest_Bearer{x}
		return true, err
	default:
		return false, nil
	}
}

func _UserProfileRequest_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*UserProfileRequest)
	// t
	switch x := m.T.(type) {
	case *UserProfileRequest_Token:
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.Token)))
		n += len(x.Token)
	case *UserProfileRequest_Bearer:
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.Bearer)))
		n += len(x.Bearer)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetUserByIDRequest struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetUserByIDRequest) Reset()         { *m = GetUserByIDRequest{} }
func (m *GetUserByIDRequest) String() string { return proto1.CompactTextString(m) }
func (*GetUserByIDRequest) ProtoMessage()    {}
func (*GetUserByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUserprofileService, []int{2}
}

func (m *GetUserByIDRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserProfileResponse struct {
	ID          uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Surname     string    `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`
	DisplayName string    `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Email       string    `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	CompanyName string    `protobuf:"bytes,6,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	IsStaff     bool      `protobuf:"varint,7,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	HelpInfo    string    `protobuf:"bytes,8,opt,name=help_info,json=helpInfo,proto3" json:"help_info,omitempty"`
	Credits     string    `protobuf:"bytes,9,opt,name=credits,proto3" json:"credits,omitempty"`
	Caps        *UserCaps `protobuf:"bytes,10,opt,name=caps" json:"caps,omitempty"`
}

func (m *UserProfileResponse) Reset()         { *m = UserProfileResponse{} }
func (m *UserProfileResponse) String() string { return proto1.CompactTextString(m) }
func (*UserProfileResponse) ProtoMessage()    {}
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUserprofileService, []int{3}
}

func (m *UserProfileResponse) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserProfileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProfileResponse) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *UserProfileResponse) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *UserProfileResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserProfileResponse) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UserProfileResponse) GetIsStaff() bool {
	if m != nil {
		return m.IsStaff
	}
	return false
}

func (m *UserProfileResponse) GetHelpInfo() string {
	if m != nil {
		return m.HelpInfo
	}
	return ""
}

func (m *UserProfileResponse) GetCredits() string {
	if m != nil {
		return m.Credits
	}
	return ""
}

func (m *UserProfileResponse) GetCaps() *UserCaps {
	if m != nil {
		return m.Caps
	}
	return nil
}

type OAuth2TokenRequest struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId  string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *OAuth2TokenRequest) Reset()         { *m = OAuth2TokenRequest{} }
func (m *OAuth2TokenRequest) String() string { return proto1.CompactTextString(m) }
func (*OAuth2TokenRequest) ProtoMessage()    {}
func (*OAuth2TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUserprofileService, []int{4}
}

func (m *OAuth2TokenRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OAuth2TokenRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type OAuth2TokenResponse struct {
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *OAuth2TokenResponse) Reset()         { *m = OAuth2TokenResponse{} }
func (m *OAuth2TokenResponse) String() string { return proto1.CompactTextString(m) }
func (*OAuth2TokenResponse) ProtoMessage()    {}
func (*OAuth2TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUserprofileService, []int{5}
}

func (m *OAuth2TokenResponse) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OAuth2TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto1.RegisterType((*UserCaps)(nil), "proto.UserCaps")
	proto1.RegisterType((*UserProfileRequest)(nil), "proto.UserProfileRequest")
	proto1.RegisterType((*GetUserByIDRequest)(nil), "proto.GetUserByIDRequest")
	proto1.RegisterType((*UserProfileResponse)(nil), "proto.UserProfileResponse")
	proto1.RegisterType((*OAuth2TokenRequest)(nil), "proto.OAuth2TokenRequest")
	proto1.RegisterType((*OAuth2TokenResponse)(nil), "proto.OAuth2TokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserProfileService service

type UserProfileServiceClient interface {
	GetOAuth2Token(ctx context.Context, in *OAuth2TokenRequest, opts ...grpc.CallOption) (*OAuth2TokenResponse, error)
	Get(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
}

type userProfileServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserProfileServiceClient(cc *grpc.ClientConn) UserProfileServiceClient {
	return &userProfileServiceClient{cc}
}

func (c *userProfileServiceClient) GetOAuth2Token(ctx context.Context, in *OAuth2TokenRequest, opts ...grpc.CallOption) (*OAuth2TokenResponse, error) {
	out := new(OAuth2TokenResponse)
	err := grpc.Invoke(ctx, "/proto.UserProfileService/GetOAuth2Token", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) Get(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := grpc.Invoke(ctx, "/proto.UserProfileService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := grpc.Invoke(ctx, "/proto.UserProfileService/GetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserProfileService service

type UserProfileServiceServer interface {
	GetOAuth2Token(context.Context, *OAuth2TokenRequest) (*OAuth2TokenResponse, error)
	Get(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*UserProfileResponse, error)
}

func RegisterUserProfileServiceServer(s *grpc.Server, srv UserProfileServiceServer) {
	s.RegisterService(&_UserProfileService_serviceDesc, srv)
}

func _UserProfileService_GetOAuth2Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuth2TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).GetOAuth2Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserProfileService/GetOAuth2Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).GetOAuth2Token(ctx, req.(*OAuth2TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserProfileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).Get(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfileService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserProfileService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserProfileService",
	HandlerType: (*UserProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOAuth2Token",
			Handler:    _UserProfileService_GetOAuth2Token_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserProfileService_Get_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserProfileService_GetUserByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userprofile_service.proto",
}

func (m *UserCaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCaps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventsInProcessMaxCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.EventsInProcessMaxCount))
	}
	if m.FileUploadMaxSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.FileUploadMaxSize))
	}
	if m.FilesEventMaxCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.FilesEventMaxCount))
	}
	if m.PlatformsEventMaxCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.PlatformsEventMaxCount))
	}
	if m.IsViewportingEnabled {
		dAtA[i] = 0x28
		i++
		if m.IsViewportingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlatformIds) > 0 {
		for _, s := range m.PlatformIds {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		nn1, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *UserProfileRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	return i, nil
}
func (m *UserProfileRequest_Bearer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Bearer)))
	i += copy(dAtA[i:], m.Bearer)
	return i, nil
}
func (m *GetUserByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *UserProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Surname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Surname)))
		i += copy(dAtA[i:], m.Surname)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.CompanyName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.CompanyName)))
		i += copy(dAtA[i:], m.CompanyName)
	}
	if m.IsStaff {
		dAtA[i] = 0x38
		i++
		if m.IsStaff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HelpInfo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.HelpInfo)))
		i += copy(dAtA[i:], m.HelpInfo)
	}
	if len(m.Credits) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Credits)))
		i += copy(dAtA[i:], m.Credits)
	}
	if m.Caps != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.Caps.Size()))
		n2, err := m.Caps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *OAuth2TokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuth2TokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.UserId))
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	return i, nil
}

func (m *OAuth2TokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuth2TokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserprofileService(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func encodeVarintUserprofileService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserCaps) Size() (n int) {
	var l int
	_ = l
	if m.EventsInProcessMaxCount != 0 {
		n += 1 + sovUserprofileService(uint64(m.EventsInProcessMaxCount))
	}
	if m.FileUploadMaxSize != 0 {
		n += 1 + sovUserprofileService(uint64(m.FileUploadMaxSize))
	}
	if m.FilesEventMaxCount != 0 {
		n += 1 + sovUserprofileService(uint64(m.FilesEventMaxCount))
	}
	if m.PlatformsEventMaxCount != 0 {
		n += 1 + sovUserprofileService(uint64(m.PlatformsEventMaxCount))
	}
	if m.IsViewportingEnabled {
		n += 2
	}
	if len(m.PlatformIds) > 0 {
		for _, s := range m.PlatformIds {
			l = len(s)
			n += 1 + l + sovUserprofileService(uint64(l))
		}
	}
	return n
}

func (m *UserProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.T != nil {
		n += m.T.Size()
	}
	return n
}

func (m *UserProfileRequest_Token) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	n += 1 + l + sovUserprofileService(uint64(l))
	return n
}
func (m *UserProfileRequest_Bearer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bearer)
	n += 1 + l + sovUserprofileService(uint64(l))
	return n
}
func (m *GetUserByIDRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserprofileService(uint64(m.UserId))
	}
	return n
}

func (m *UserProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUserprofileService(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	l = len(m.Surname)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	if m.IsStaff {
		n += 2
	}
	l = len(m.HelpInfo)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	l = len(m.Credits)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	if m.Caps != nil {
		l = m.Caps.Size()
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	return n
}

func (m *OAuth2TokenRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserprofileService(uint64(m.UserId))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	return n
}

func (m *OAuth2TokenResponse) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserprofileService(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUserprofileService(uint64(l))
	}
	return n
}

func sovUserprofileService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserprofileService(x uint64) (n int) {
	return sovUserprofileService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserCaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsInProcessMaxCount", wireType)
			}
			m.EventsInProcessMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsInProcessMaxCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUploadMaxSize", wireType)
			}
			m.FileUploadMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileUploadMaxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesEventMaxCount", wireType)
			}
			m.FilesEventMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilesEventMaxCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformsEventMaxCount", wireType)
			}
			m.PlatformsEventMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformsEventMaxCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsViewportingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsViewportingEnabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformIds = append(m.PlatformIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.T = &UserProfileRequest_Token{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bearer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.T = &UserProfileRequest_Bearer{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Surname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStaff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStaff = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Caps == nil {
				m.Caps = &UserCaps{}
			}
			if err := m.Caps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuth2TokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuth2TokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuth2TokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuth2TokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuth2TokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuth2TokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserprofileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserprofileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserprofileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserprofileService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserprofileService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserprofileService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserprofileService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserprofileService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserprofileService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserprofileService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserprofileService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("userprofile_service.proto", fileDescriptorUserprofileService) }

var fileDescriptorUserprofileService = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xfd, 0x9c, 0xff, 0x4c, 0x3e, 0x8a, 0x98, 0xa6, 0xa9, 0x93, 0xd2, 0x38, 0x35, 0x20, 0xb2,
	0x69, 0x23, 0xca, 0x8e, 0x1d, 0x69, 0xaa, 0x36, 0x42, 0x2d, 0xc5, 0xa5, 0x2c, 0x90, 0x90, 0x35,
	0x89, 0x27, 0xe9, 0x08, 0x67, 0x66, 0xf0, 0x8c, 0x43, 0x5b, 0xc4, 0x86, 0x57, 0x60, 0xc3, 0x53,
	0xf0, 0x1a, 0xb0, 0x44, 0x62, 0x1f, 0xa1, 0xc0, 0x8a, 0x65, 0x9e, 0x00, 0xcd, 0x8c, 0x1d, 0x12,
	0x25, 0xed, 0xb7, 0xb2, 0xcf, 0xb9, 0xf7, 0x9e, 0x7b, 0x67, 0xee, 0xb1, 0x41, 0x3d, 0x16, 0x38,
	0xe2, 0x11, 0x1b, 0x91, 0x10, 0xfb, 0x02, 0x47, 0x53, 0x32, 0xc4, 0x27, 0x3c, 0x62, 0x92, 0xc1,
	0xbc, 0x7e, 0x34, 0xde, 0x1d, 0x33, 0x36, 0x0e, 0x71, 0x07, 0x71, 0xd2, 0x41, 0x94, 0x32, 0x89,
	0x24, 0x61, 0x54, 0x98, 0xa4, 0xc6, 0xf1, 0x98, 0xc8, 0xfb, 0x78, 0x70, 0x32, 0x64, 0x93, 0xce,
	0x98, 0x8d, 0x59, 0x47, 0xd3, 0x83, 0x78, 0xa4, 0x91, 0x06, 0xfa, 0xcd, 0xa4, 0xbb, 0xff, 0x66,
	0x41, 0xe9, 0x4e, 0xe0, 0xe8, 0x0c, 0x71, 0x01, 0x07, 0xe0, 0x00, 0x4f, 0x31, 0x95, 0xc2, 0x27,
	0xd4, 0xe7, 0x11, 0x1b, 0x62, 0x21, 0xfc, 0x09, 0x7a, 0xf0, 0x87, 0x2c, 0xa6, 0xd2, 0xb6, 0x5a,
	0x56, 0xfb, 0xad, 0xee, 0xfb, 0x8b, 0x99, 0xd3, 0x0a, 0x06, 0x9f, 0xb8, 0x2f, 0xa4, 0xba, 0xde,
	0xbe, 0x89, 0xf6, 0xe9, 0x8d, 0x89, 0x5d, 0xa1, 0x87, 0x33, 0x15, 0x81, 0xd7, 0xa0, 0xaa, 0x8f,
	0x16, 0xf3, 0x90, 0xa1, 0x40, 0x97, 0x08, 0xf2, 0x84, 0xed, 0x8c, 0x16, 0x3f, 0x5c, 0xcc, 0x9c,
	0xba, 0x12, 0xdf, 0x96, 0xe3, 0x7a, 0xef, 0x28, 0xfa, 0x4e, 0xb3, 0x57, 0xe8, 0xe1, 0x96, 0x3c,
	0x61, 0xf8, 0x05, 0xd8, 0x53, 0xa4, 0xf0, 0x75, 0xc3, 0x95, 0x69, 0xb3, 0x5a, 0xb0, 0xb9, 0x98,
	0x39, 0x8d, 0x54, 0x70, 0x23, 0xc9, 0xf5, 0xa0, 0xe6, 0xcf, 0x15, 0xbd, 0x1c, 0xf1, 0x1b, 0x50,
	0xe7, 0x21, 0x92, 0x23, 0x16, 0x4d, 0x36, 0x65, 0x73, 0x5a, 0xd6, 0x5d, 0xcc, 0x9c, 0xa6, 0x92,
	0x7d, 0x36, 0xd1, 0xf5, 0x6a, 0xcb, 0xd8, 0xba, 0xfc, 0x1d, 0xa8, 0x11, 0xe1, 0x4f, 0x09, 0xfe,
	0x9e, 0xb3, 0x48, 0x12, 0x3a, 0xf6, 0x31, 0x45, 0x83, 0x10, 0x07, 0x76, 0xbe, 0x65, 0xb5, 0x4b,
	0x5d, 0x67, 0x31, 0x73, 0x0e, 0x94, 0xf6, 0xf6, 0x2c, 0xd7, 0xab, 0x12, 0xf1, 0xd5, 0xff, 0xfc,
	0xb9, 0xa1, 0xe1, 0x11, 0x78, 0x9d, 0x36, 0xf4, 0x49, 0x20, 0xec, 0x42, 0x2b, 0xdb, 0x2e, 0x7b,
	0x95, 0x94, 0xeb, 0x07, 0xc2, 0xfd, 0x0c, 0x40, 0xb5, 0xeb, 0x1b, 0xe3, 0x2e, 0x0f, 0x7f, 0x17,
	0x63, 0x21, 0x61, 0x0d, 0xe4, 0x25, 0xfb, 0x16, 0x53, 0xbd, 0xdf, 0xf2, 0xe5, 0x2b, 0xcf, 0x40,
	0x68, 0x83, 0xc2, 0x00, 0xa3, 0x08, 0x47, 0x7a, 0x37, 0x2a, 0x90, 0xe0, 0x6e, 0x16, 0x58, 0xd2,
	0x3d, 0x06, 0xf0, 0x02, 0x4b, 0xa5, 0xd7, 0x7d, 0xec, 0xf7, 0x52, 0xb1, 0x7d, 0x50, 0x54, 0x06,
	0xf6, 0x49, 0x60, 0xec, 0xe2, 0x15, 0x14, 0xec, 0x07, 0xee, 0xaf, 0x19, 0xb0, 0xbb, 0xd6, 0x5c,
	0x70, 0x46, 0x05, 0x86, 0x35, 0x90, 0x49, 0x73, 0xbb, 0x85, 0xf9, 0xcc, 0xc9, 0xf4, 0x7b, 0x5e,
	0x86, 0x04, 0x10, 0x82, 0x1c, 0x45, 0x13, 0xe3, 0x8b, 0xb2, 0xa7, 0xdf, 0xa1, 0x0d, 0x8a, 0x22,
	0x8e, 0x34, 0x9d, 0xd5, 0x74, 0x0a, 0xd5, 0xe1, 0x03, 0x22, 0x78, 0x88, 0x1e, 0x7d, 0x1d, 0xce,
	0xe9, 0x70, 0x25, 0xe1, 0xae, 0x55, 0x4a, 0x15, 0xe4, 0xf1, 0x04, 0x91, 0x50, 0xdf, 0x72, 0xd9,
	0x33, 0x40, 0x15, 0x0e, 0xd9, 0x84, 0x23, 0x9a, 0x14, 0x16, 0x4c, 0x61, 0xc2, 0xe9, 0xc2, 0x3a,
	0x28, 0x11, 0xe1, 0x0b, 0x89, 0x46, 0x23, 0xbb, 0xa8, 0x36, 0xe4, 0x15, 0x89, 0xb8, 0x55, 0x10,
	0x1e, 0x80, 0xf2, 0x3d, 0x0e, 0xb9, 0x4f, 0xe8, 0x88, 0xd9, 0x25, 0x5d, 0x5a, 0x52, 0x44, 0x9f,
	0x8e, 0x98, 0x9a, 0x76, 0x18, 0xe1, 0x80, 0x48, 0x61, 0x97, 0xcd, 0xb4, 0x09, 0x84, 0xef, 0x81,
	0xdc, 0x10, 0x71, 0x61, 0x83, 0x96, 0xd5, 0xae, 0x9c, 0xbe, 0x6d, 0x3e, 0xc5, 0x93, 0xf4, 0x33,
	0xf4, 0x74, 0xd0, 0xed, 0x01, 0xf8, 0xf9, 0xa7, 0xb1, 0xbc, 0x3f, 0xfd, 0x52, 0x6d, 0xe3, 0x4d,
	0xf7, 0x0b, 0xf7, 0x40, 0x01, 0x71, 0xae, 0x78, 0x73, 0x63, 0x79, 0xc4, 0x79, 0x3f, 0x70, 0x7b,
	0x60, 0x77, 0x4d, 0x25, 0xb9, 0xf5, 0x67, 0x65, 0xaa, 0xa9, 0x19, 0x12, 0x15, 0x0d, 0x4e, 0x7f,
	0xcb, 0xac, 0x39, 0xe7, 0xd6, 0xfc, 0x96, 0x20, 0x05, 0x3b, 0x17, 0x58, 0xae, 0xe8, 0xc3, 0x7a,
	0x72, 0x96, 0xcd, 0xc9, 0x1b, 0x8d, 0x6d, 0x21, 0x33, 0x8e, 0xfb, 0xc1, 0x4f, 0x7f, 0xfe, 0xf3,
	0x73, 0xc6, 0x81, 0x87, 0xfa, 0xa7, 0x36, 0xfd, 0xa8, 0xa3, 0xa6, 0x11, 0x9d, 0x1f, 0x92, 0x19,
	0x7f, 0xec, 0x18, 0x47, 0x7a, 0x20, 0x7b, 0x81, 0xe5, 0xb2, 0xc9, 0xa6, 0x97, 0x97, 0x4d, 0xb6,
	0x38, 0xcd, 0xad, 0xea, 0x26, 0x3b, 0xf0, 0xf5, 0x6a, 0x13, 0x38, 0x01, 0x95, 0x15, 0x1b, 0x2f,
	0xb5, 0x37, 0xad, 0xfd, 0xa2, 0xf6, 0x87, 0x5a, 0xfb, 0x08, 0x3a, 0x5a, 0x9b, 0x47, 0x64, 0x8a,
	0x24, 0xde, 0x72, 0x90, 0x6e, 0xfd, 0xf7, 0x79, 0xd3, 0xfa, 0x63, 0xde, 0xb4, 0xfe, 0x9a, 0x37,
	0xad, 0x5f, 0xfe, 0x6e, 0xbe, 0xba, 0xb4, 0xbe, 0x36, 0xff, 0xf5, 0x41, 0x41, 0x3f, 0x3e, 0xfe,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xdb, 0x54, 0x00, 0x02, 0x06, 0x00, 0x00,
}
