// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metering_service.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		metering_service.proto

	It has these top-level messages:
		ResourceUsageRequest
		ResourceUsageResponse
		ResourceUsagesResponse
		CPUUsage
		CDNUsage
		StorageUsage
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type StorageUsage_ResourceType int32

const (
	ResourceTypeUnknown      StorageUsage_ResourceType = 0
	ResourceTypeVODOrigin    StorageUsage_ResourceType = 1
	ResourceTypeVODPreview   StorageUsage_ResourceType = 2
	ResourceTypeVODProcessed StorageUsage_ResourceType = 3
	ResourceTypeBroadcast    StorageUsage_ResourceType = 4
	ResourceTypeLive         StorageUsage_ResourceType = 5
)

var StorageUsage_ResourceType_name = map[int32]string{
	0: "STREAM_TYPE_UNKNOWN",
	1: "ORIGIN",
	2: "PREVIEW",
	3: "PROCESSED",
	4: "BROADCAST",
	5: "LIVE",
}
var StorageUsage_ResourceType_value = map[string]int32{
	"STREAM_TYPE_UNKNOWN": 0,
	"ORIGIN":              1,
	"PREVIEW":             2,
	"PROCESSED":           3,
	"BROADCAST":           4,
	"LIVE":                5,
}

func (x StorageUsage_ResourceType) String() string {
	return proto1.EnumName(StorageUsage_ResourceType_name, int32(x))
}
func (StorageUsage_ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMeteringService, []int{5, 0}
}

type ResourceUsageRequest struct {
	UserID  uint64     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	From    *time.Time `protobuf:"bytes,2,opt,name=from,stdtime" json:"from,omitempty"`
	To      *time.Time `protobuf:"bytes,3,opt,name=to,stdtime" json:"to,omitempty"`
	EventId uint64     `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *ResourceUsageRequest) Reset()         { *m = ResourceUsageRequest{} }
func (m *ResourceUsageRequest) String() string { return proto1.CompactTextString(m) }
func (*ResourceUsageRequest) ProtoMessage()    {}
func (*ResourceUsageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMeteringService, []int{0}
}

func (m *ResourceUsageRequest) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ResourceUsageRequest) GetFrom() *time.Time {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ResourceUsageRequest) GetTo() *time.Time {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ResourceUsageRequest) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type ResourceUsageResponse struct {
	EventID      uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CPU          int64  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CDN          int64  `protobuf:"varint,3,opt,name=cdn,proto3" json:"cdn,omitempty"`
	Storage      int64  `protobuf:"varint,4,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageSpace int64  `protobuf:"varint,5,opt,name=storage_space,json=storageSpace,proto3" json:"storage_space,omitempty"`
}

func (m *ResourceUsageResponse) Reset()         { *m = ResourceUsageResponse{} }
func (m *ResourceUsageResponse) String() string { return proto1.CompactTextString(m) }
func (*ResourceUsageResponse) ProtoMessage()    {}
func (*ResourceUsageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMeteringService, []int{1}
}

func (m *ResourceUsageResponse) GetEventID() uint64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *ResourceUsageResponse) GetCPU() int64 {
	if m != nil {
		return m.CPU
	}
	return 0
}

func (m *ResourceUsageResponse) GetCDN() int64 {
	if m != nil {
		return m.CDN
	}
	return 0
}

func (m *ResourceUsageResponse) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ResourceUsageResponse) GetStorageSpace() int64 {
	if m != nil {
		return m.StorageSpace
	}
	return 0
}

type ResourceUsagesResponse struct {
	Items []*ResourceUsageResponse `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ResourceUsagesResponse) Reset()         { *m = ResourceUsagesResponse{} }
func (m *ResourceUsagesResponse) String() string { return proto1.CompactTextString(m) }
func (*ResourceUsagesResponse) ProtoMessage()    {}
func (*ResourceUsagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMeteringService, []int{2}
}

func (m *ResourceUsagesResponse) GetItems() []*ResourceUsageResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

type CPUUsage struct {
	Timestamp   time.Time `protobuf:"bytes,1,opt,name=timestamp,stdtime" json:"timestamp"`
	UserID      uint64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventID     uint64    `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	BroadcastID string    `protobuf:"bytes,4,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	Seconds     uint64    `protobuf:"varint,5,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (m *CPUUsage) Reset()                    { *m = CPUUsage{} }
func (m *CPUUsage) String() string            { return proto1.CompactTextString(m) }
func (*CPUUsage) ProtoMessage()               {}
func (*CPUUsage) Descriptor() ([]byte, []int) { return fileDescriptorMeteringService, []int{3} }

func (m *CPUUsage) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CPUUsage) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CPUUsage) GetEventID() uint64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *CPUUsage) GetBroadcastID() string {
	if m != nil {
		return m.BroadcastID
	}
	return ""
}

func (m *CPUUsage) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type CDNUsage struct {
	Timestamp   time.Time `protobuf:"bytes,1,opt,name=timestamp,stdtime" json:"timestamp"`
	UserID      uint64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventID     uint64    `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	BroadcastID string    `protobuf:"bytes,4,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	Bytes       uint64    `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *CDNUsage) Reset()                    { *m = CDNUsage{} }
func (m *CDNUsage) String() string            { return proto1.CompactTextString(m) }
func (*CDNUsage) ProtoMessage()               {}
func (*CDNUsage) Descriptor() ([]byte, []int) { return fileDescriptorMeteringService, []int{4} }

func (m *CDNUsage) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CDNUsage) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CDNUsage) GetEventID() uint64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *CDNUsage) GetBroadcastID() string {
	if m != nil {
		return m.BroadcastID
	}
	return ""
}

func (m *CDNUsage) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type StorageUsage struct {
	Timestamp   time.Time                 `protobuf:"bytes,1,opt,name=timestamp,stdtime" json:"timestamp"`
	UserID      uint64                    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventID     uint64                    `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	BroadcastID string                    `protobuf:"bytes,4,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	StreamID    uint64                    `protobuf:"varint,5,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamType  StorageUsage_ResourceType `protobuf:"varint,6,opt,name=stream_type,json=streamType,proto3,enum=proto.StorageUsage_ResourceType" json:"stream_type,omitempty"`
	Bytes       int64                     `protobuf:"varint,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *StorageUsage) Reset()                    { *m = StorageUsage{} }
func (m *StorageUsage) String() string            { return proto1.CompactTextString(m) }
func (*StorageUsage) ProtoMessage()               {}
func (*StorageUsage) Descriptor() ([]byte, []int) { return fileDescriptorMeteringService, []int{5} }

func (m *StorageUsage) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *StorageUsage) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *StorageUsage) GetEventID() uint64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *StorageUsage) GetBroadcastID() string {
	if m != nil {
		return m.BroadcastID
	}
	return ""
}

func (m *StorageUsage) GetStreamID() uint64 {
	if m != nil {
		return m.StreamID
	}
	return 0
}

func (m *StorageUsage) GetStreamType() StorageUsage_ResourceType {
	if m != nil {
		return m.StreamType
	}
	return ResourceTypeUnknown
}

func (m *StorageUsage) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func init() {
	proto1.RegisterType((*ResourceUsageRequest)(nil), "proto.ResourceUsageRequest")
	proto1.RegisterType((*ResourceUsageResponse)(nil), "proto.ResourceUsageResponse")
	proto1.RegisterType((*ResourceUsagesResponse)(nil), "proto.ResourceUsagesResponse")
	proto1.RegisterType((*CPUUsage)(nil), "proto.CPUUsage")
	proto1.RegisterType((*CDNUsage)(nil), "proto.CDNUsage")
	proto1.RegisterType((*StorageUsage)(nil), "proto.StorageUsage")
	proto1.RegisterEnum("proto.StorageUsage_ResourceType", StorageUsage_ResourceType_name, StorageUsage_ResourceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MeteringService service

type MeteringServiceClient interface {
	GetResourceUsageGroupByEvents(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsagesResponse, error)
	GetResourceUsageByEvent(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsageResponse, error)
	GetResourceUsage(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsageResponse, error)
}

type meteringServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeteringServiceClient(cc *grpc.ClientConn) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) GetResourceUsageGroupByEvents(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsagesResponse, error) {
	out := new(ResourceUsagesResponse)
	err := grpc.Invoke(ctx, "/proto.MeteringService/GetResourceUsageGroupByEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) GetResourceUsageByEvent(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsageResponse, error) {
	out := new(ResourceUsageResponse)
	err := grpc.Invoke(ctx, "/proto.MeteringService/GetResourceUsageByEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) GetResourceUsage(ctx context.Context, in *ResourceUsageRequest, opts ...grpc.CallOption) (*ResourceUsageResponse, error) {
	out := new(ResourceUsageResponse)
	err := grpc.Invoke(ctx, "/proto.MeteringService/GetResourceUsage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeteringService service

type MeteringServiceServer interface {
	GetResourceUsageGroupByEvents(context.Context, *ResourceUsageRequest) (*ResourceUsagesResponse, error)
	GetResourceUsageByEvent(context.Context, *ResourceUsageRequest) (*ResourceUsageResponse, error)
	GetResourceUsage(context.Context, *ResourceUsageRequest) (*ResourceUsageResponse, error)
}

func RegisterMeteringServiceServer(s *grpc.Server, srv MeteringServiceServer) {
	s.RegisterService(&_MeteringService_serviceDesc, srv)
}

func _MeteringService_GetResourceUsageGroupByEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).GetResourceUsageGroupByEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/GetResourceUsageGroupByEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).GetResourceUsageGroupByEvents(ctx, req.(*ResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_GetResourceUsageByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).GetResourceUsageByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/GetResourceUsageByEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).GetResourceUsageByEvent(ctx, req.(*ResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_GetResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).GetResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeteringService/GetResourceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).GetResourceUsage(ctx, req.(*ResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeteringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceUsageGroupByEvents",
			Handler:    _MeteringService_GetResourceUsageGroupByEvents_Handler,
		},
		{
			MethodName: "GetResourceUsageByEvent",
			Handler:    _MeteringService_GetResourceUsageByEvent_Handler,
		},
		{
			MethodName: "GetResourceUsage",
			Handler:    _MeteringService_GetResourceUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metering_service.proto",
}

func (m *ResourceUsageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.UserID))
	}
	if m.From != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.From)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.From, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.To != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.To)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.To, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EventId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.EventId))
	}
	return i, nil
}

func (m *ResourceUsageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.EventID))
	}
	if m.CPU != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.CPU))
	}
	if m.CDN != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.CDN))
	}
	if m.Storage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.Storage))
	}
	if m.StorageSpace != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.StorageSpace))
	}
	return i, nil
}

func (m *ResourceUsagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeteringService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPUUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUUsage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeteringService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.UserID))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.EventID))
	}
	if len(m.BroadcastID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(len(m.BroadcastID)))
		i += copy(dAtA[i:], m.BroadcastID)
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.Seconds))
	}
	return i, nil
}

func (m *CDNUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNUsage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeteringService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.UserID))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.EventID))
	}
	if len(m.BroadcastID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(len(m.BroadcastID)))
		i += copy(dAtA[i:], m.BroadcastID)
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func (m *StorageUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageUsage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeteringService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.UserID))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.EventID))
	}
	if len(m.BroadcastID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(len(m.BroadcastID)))
		i += copy(dAtA[i:], m.BroadcastID)
	}
	if m.StreamID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.StreamID))
	}
	if m.StreamType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.StreamType))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMeteringService(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func encodeFixed64MeteringService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MeteringService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMeteringService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceUsageRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovMeteringService(uint64(m.UserID))
	}
	if m.From != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.From)
		n += 1 + l + sovMeteringService(uint64(l))
	}
	if m.To != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.To)
		n += 1 + l + sovMeteringService(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovMeteringService(uint64(m.EventId))
	}
	return n
}

func (m *ResourceUsageResponse) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovMeteringService(uint64(m.EventID))
	}
	if m.CPU != 0 {
		n += 1 + sovMeteringService(uint64(m.CPU))
	}
	if m.CDN != 0 {
		n += 1 + sovMeteringService(uint64(m.CDN))
	}
	if m.Storage != 0 {
		n += 1 + sovMeteringService(uint64(m.Storage))
	}
	if m.StorageSpace != 0 {
		n += 1 + sovMeteringService(uint64(m.StorageSpace))
	}
	return n
}

func (m *ResourceUsagesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMeteringService(uint64(l))
		}
	}
	return n
}

func (m *CPUUsage) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovMeteringService(uint64(l))
	if m.UserID != 0 {
		n += 1 + sovMeteringService(uint64(m.UserID))
	}
	if m.EventID != 0 {
		n += 1 + sovMeteringService(uint64(m.EventID))
	}
	l = len(m.BroadcastID)
	if l > 0 {
		n += 1 + l + sovMeteringService(uint64(l))
	}
	if m.Seconds != 0 {
		n += 1 + sovMeteringService(uint64(m.Seconds))
	}
	return n
}

func (m *CDNUsage) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovMeteringService(uint64(l))
	if m.UserID != 0 {
		n += 1 + sovMeteringService(uint64(m.UserID))
	}
	if m.EventID != 0 {
		n += 1 + sovMeteringService(uint64(m.EventID))
	}
	l = len(m.BroadcastID)
	if l > 0 {
		n += 1 + l + sovMeteringService(uint64(l))
	}
	if m.Bytes != 0 {
		n += 1 + sovMeteringService(uint64(m.Bytes))
	}
	return n
}

func (m *StorageUsage) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovMeteringService(uint64(l))
	if m.UserID != 0 {
		n += 1 + sovMeteringService(uint64(m.UserID))
	}
	if m.EventID != 0 {
		n += 1 + sovMeteringService(uint64(m.EventID))
	}
	l = len(m.BroadcastID)
	if l > 0 {
		n += 1 + l + sovMeteringService(uint64(l))
	}
	if m.StreamID != 0 {
		n += 1 + sovMeteringService(uint64(m.StreamID))
	}
	if m.StreamType != 0 {
		n += 1 + sovMeteringService(uint64(m.StreamType))
	}
	if m.Bytes != 0 {
		n += 1 + sovMeteringService(uint64(m.Bytes))
	}
	return n
}

func sovMeteringService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeteringService(x uint64) (n int) {
	return sovMeteringService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceUsageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			m.CPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CPU |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDN", wireType)
			}
			m.CDN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CDN |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			m.Storage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Storage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageSpace", wireType)
			}
			m.StorageSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageSpace |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ResourceUsageResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPUUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeteringService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			m.StreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamType", wireType)
			}
			m.StreamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamType |= (StorageUsage_ResourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeteringService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeteringService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeteringService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeteringService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeteringService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeteringService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeteringService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeteringService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeteringService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeteringService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("metering_service.proto", fileDescriptorMeteringService) }

var fileDescriptorMeteringService = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x27, 0xd9, 0xfc, 0x78, 0x09, 0x34, 0xcc, 0x6e, 0xb7, 0x8e, 0xd9, 0x26, 0x56, 0x56,
	0x85, 0xa0, 0x8a, 0xa4, 0x04, 0xee, 0x68, 0xbd, 0x8e, 0x16, 0x8b, 0x6d, 0x12, 0x4d, 0x92, 0xad,
	0xe0, 0x12, 0x39, 0xf1, 0xd4, 0xb5, 0x20, 0x1e, 0xe3, 0x99, 0xa4, 0x5a, 0xa1, 0x1e, 0xe0, 0x84,
	0x72, 0x42, 0xe2, 0x82, 0x84, 0x72, 0x82, 0x3f, 0x81, 0x13, 0x07, 0xce, 0x3d, 0x22, 0x71, 0x0f,
	0x28, 0xc0, 0x81, 0x33, 0x77, 0x84, 0x3c, 0xb6, 0xb3, 0xe9, 0xee, 0x76, 0x85, 0xd4, 0x5b, 0x4f,
	0x9e, 0xf7, 0xde, 0xf7, 0xe6, 0xbd, 0xef, 0x9b, 0x5f, 0x86, 0xbd, 0x09, 0xe1, 0xc4, 0x77, 0x5c,
	0x7b, 0xc8, 0x88, 0x3f, 0x73, 0xc6, 0xa4, 0xee, 0xf9, 0x94, 0x53, 0xb4, 0x2d, 0x3e, 0x4a, 0xc5,
	0xa6, 0xd4, 0xfe, 0x94, 0x34, 0x84, 0x35, 0x9a, 0x3e, 0x6c, 0x70, 0x67, 0x42, 0x18, 0x37, 0x27,
	0x5e, 0x88, 0x53, 0xf6, 0x23, 0x80, 0xe9, 0x39, 0x0d, 0xd3, 0x75, 0x29, 0x37, 0xb9, 0x43, 0x5d,
	0x16, 0x45, 0xdf, 0xb6, 0x1d, 0xfe, 0x68, 0x3a, 0xaa, 0x8f, 0xe9, 0xa4, 0x61, 0x53, 0x9b, 0x9e,
	0xcf, 0x13, 0x58, 0xc2, 0x10, 0xa3, 0x10, 0x5e, 0xfd, 0x59, 0x82, 0x5d, 0x4c, 0x18, 0x9d, 0xfa,
	0x63, 0x32, 0x60, 0xa6, 0x4d, 0x30, 0xf9, 0x6c, 0x4a, 0x18, 0x47, 0x07, 0x90, 0x99, 0x32, 0xe2,
	0x0f, 0x1d, 0x4b, 0x96, 0x54, 0xa9, 0x96, 0xd2, 0x60, 0xb5, 0xac, 0xa4, 0x07, 0x8c, 0xf8, 0x86,
	0x8e, 0xd3, 0x41, 0xc8, 0xb0, 0xd0, 0x7b, 0x90, 0x7a, 0xe8, 0xd3, 0x89, 0x9c, 0x50, 0xa5, 0x5a,
	0xbe, 0xa9, 0xd4, 0xc3, 0xce, 0xea, 0x71, 0xc9, 0x7a, 0x3f, 0x6e, 0x5d, 0x4b, 0x7d, 0xfd, 0x5b,
	0x45, 0xc2, 0x02, 0x8d, 0xee, 0x41, 0x82, 0x53, 0x39, 0xf9, 0x3f, 0x73, 0x12, 0x9c, 0xa2, 0x12,
	0x64, 0xc9, 0x8c, 0xb8, 0x3c, 0xe8, 0x26, 0x15, 0x74, 0x83, 0x33, 0xc2, 0x36, 0xac, 0xea, 0x8f,
	0x12, 0xdc, 0xbc, 0x40, 0x80, 0x79, 0xd4, 0x65, 0x04, 0xbd, 0xb1, 0x91, 0x14, 0x52, 0xc8, 0xaf,
	0x96, 0x95, 0x4c, 0x4b, 0x24, 0xea, 0xeb, 0x19, 0x50, 0x09, 0x92, 0x63, 0x6f, 0x2a, 0x38, 0x24,
	0xb5, 0xcc, 0x6a, 0x59, 0x49, 0x1e, 0x75, 0x07, 0x38, 0xf0, 0x89, 0x90, 0xe5, 0x8a, 0x56, 0xe3,
	0x90, 0xde, 0xc6, 0x81, 0x0f, 0xc9, 0x90, 0x61, 0x9c, 0xfa, 0xa6, 0x4d, 0x44, 0x47, 0x49, 0x1c,
	0x9b, 0xe8, 0x00, 0x5e, 0x89, 0x86, 0x43, 0xe6, 0x99, 0x63, 0x22, 0x6f, 0x8b, 0x78, 0x21, 0x72,
	0xf6, 0x02, 0x5f, 0xf5, 0x04, 0xf6, 0x9e, 0xe9, 0x9a, 0xad, 0xdb, 0x6e, 0xc2, 0xb6, 0xc3, 0xc9,
	0x84, 0xc9, 0x92, 0x9a, 0xac, 0xe5, 0x9b, 0xfb, 0xa1, 0x32, 0xf5, 0x2b, 0x39, 0xe2, 0x10, 0x5a,
	0xfd, 0x5b, 0x82, 0xec, 0x51, 0x77, 0x20, 0x62, 0x48, 0x83, 0xdc, 0x7a, 0xcb, 0x08, 0xe2, 0xd7,
	0xab, 0x9c, 0x7d, 0xba, 0xac, 0x6c, 0x09, 0xa5, 0xcf, 0xd3, 0x36, 0x57, 0x3f, 0xf1, 0xdc, 0xd5,
	0xdf, 0x14, 0x38, 0x79, 0x8d, 0xc0, 0x4d, 0x28, 0x8c, 0x7c, 0x6a, 0x5a, 0x63, 0x93, 0xad, 0x57,
	0x30, 0xa7, 0xdd, 0x58, 0x2d, 0x2b, 0x79, 0x2d, 0xf6, 0x1b, 0x3a, 0xce, 0xaf, 0x41, 0x86, 0x25,
	0xe4, 0x25, 0x63, 0xea, 0x5a, 0x4c, 0xc8, 0x97, 0xc2, 0xb1, 0x59, 0xfd, 0x2b, 0xe0, 0xaa, 0xb7,
	0x5f, 0x22, 0xae, 0xbb, 0xb0, 0x3d, 0x3a, 0xe3, 0x24, 0x66, 0x1a, 0x1a, 0xd5, 0x7f, 0x52, 0x50,
	0xe8, 0x85, 0x5b, 0xe6, 0x25, 0xe2, 0xfa, 0x16, 0xe4, 0x18, 0xf7, 0x89, 0x39, 0x09, 0x12, 0x04,
	0x5f, 0xad, 0xb0, 0x5a, 0x56, 0xb2, 0x3d, 0xe1, 0x34, 0x74, 0x9c, 0x0d, 0xc3, 0x86, 0x85, 0xde,
	0x87, 0x7c, 0x04, 0xe5, 0x67, 0x1e, 0x91, 0xd3, 0xaa, 0x54, 0x7b, 0xb5, 0x59, 0x8e, 0x8e, 0xc3,
	0xa6, 0x32, 0xf5, 0x30, 0xb9, 0x7f, 0xe6, 0x11, 0x0c, 0x6c, 0x3d, 0x3e, 0xd7, 0x35, 0x23, 0x0e,
	0x60, 0xa4, 0xeb, 0x77, 0x09, 0x80, 0xf3, 0x04, 0x74, 0x0f, 0x76, 0x7a, 0x7d, 0xdc, 0x3a, 0xbc,
	0x3f, 0xec, 0x7f, 0xd4, 0x6d, 0x0d, 0x07, 0xed, 0x0f, 0xdb, 0x9d, 0x07, 0xed, 0xe2, 0x96, 0x72,
	0x6b, 0xbe, 0x50, 0x77, 0xe2, 0x53, 0x17, 0x40, 0x07, 0xee, 0x27, 0x2e, 0x7d, 0xec, 0xa2, 0x3b,
	0x90, 0xee, 0x60, 0xe3, 0xd8, 0x68, 0x17, 0x25, 0xa5, 0x34, 0x5f, 0xa8, 0x37, 0x37, 0x41, 0xa7,
	0x1d, 0xbd, 0xe3, 0x3b, 0xb6, 0xe3, 0xa2, 0x37, 0x21, 0xd3, 0xc5, 0xad, 0x53, 0xa3, 0xf5, 0xa0,
	0x98, 0x50, 0x94, 0xf9, 0x42, 0xdd, 0xbb, 0x80, 0xeb, 0xfa, 0x64, 0xe6, 0x90, 0xc7, 0xe8, 0x2e,
	0xe4, 0xba, 0xb8, 0x73, 0xd4, 0xea, 0xf5, 0x5a, 0x7a, 0x31, 0xa9, 0xec, 0xcf, 0x17, 0xaa, 0x7c,
	0x09, 0x4a, 0xc7, 0x84, 0x31, 0x62, 0xa1, 0x1a, 0xe4, 0x34, 0xdc, 0x39, 0xd4, 0x8f, 0x0e, 0x7b,
	0xfd, 0x62, 0xea, 0x72, 0xfd, 0xb5, 0xf0, 0xa8, 0x0c, 0xa9, 0x13, 0xe3, 0xb4, 0x55, 0xdc, 0x56,
	0x76, 0xe7, 0x0b, 0xb5, 0xb8, 0x09, 0x3a, 0x71, 0x66, 0x44, 0xd9, 0xfd, 0xea, 0xfb, 0xf2, 0xd6,
	0x4f, 0x3f, 0x94, 0x0b, 0x9b, 0x91, 0xe6, 0xbf, 0x09, 0xb8, 0x71, 0x3f, 0x7a, 0x9f, 0x7a, 0xe1,
	0xf3, 0x84, 0x9e, 0xc0, 0xed, 0x63, 0xc2, 0x9f, 0xb9, 0x80, 0x8e, 0x7d, 0x3a, 0xf5, 0xb4, 0x33,
	0xb1, 0x25, 0x18, 0x7a, 0xfd, 0xea, 0x3b, 0x4a, 0x3c, 0x24, 0xca, 0xed, 0xab, 0x82, 0xeb, 0xeb,
	0xae, 0xaa, 0x7e, 0xf9, 0xeb, 0x9f, 0xdf, 0x24, 0x14, 0x24, 0x8b, 0xf7, 0x6c, 0xf6, 0x4e, 0xc3,
	0x8f, 0x70, 0xac, 0x41, 0xc2, 0xd9, 0xbf, 0x90, 0xe0, 0xd6, 0xc5, 0xfa, 0x51, 0xe9, 0xeb, 0x2b,
	0x5f, 0x7b, 0x75, 0x56, 0xef, 0x8a, 0xc2, 0x77, 0xd0, 0xc1, 0xf3, 0x0a, 0x37, 0x3e, 0x8f, 0x4f,
	0xc1, 0x13, 0xf4, 0x08, 0x8a, 0x17, 0x5b, 0x78, 0x91, 0xda, 0x25, 0x51, 0x7b, 0x07, 0xbd, 0x76,
	0xa9, 0xb6, 0x56, 0x7a, 0xba, 0x2a, 0x4b, 0xbf, 0xac, 0xca, 0xd2, 0xef, 0xab, 0xb2, 0xf4, 0xed,
	0x1f, 0xe5, 0xad, 0x0f, 0xa4, 0x8f, 0xc3, 0x3f, 0x83, 0x51, 0x5a, 0x7c, 0xde, 0xfd, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x24, 0xaf, 0xa5, 0x01, 0x41, 0x08, 0x00, 0x00,
}
