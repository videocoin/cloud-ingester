syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "camera_core.proto";

package proto;
option go_package = "proto";
option optimize_for = SPEED;

service CameraCloudService {
    rpc RegisterCamera(RegisterCameraRequest) returns (Camera) {
        option (google.api.http) = {
            post: "/api/v1/cameras"
            body: "*"
        };
    }

    rpc GetCamera(GetCameraRequest) returns (Camera) {
        option (google.api.http) = {
            get: "/api/v1/cameras/{id}"
        };
    }

    rpc DeleteCamera(DeleteCameraRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/cameras/{id}"
        };
    }

    rpc UpdateCamera(UpdateCameraRequest) returns (Camera) {
        option (google.api.http) = {
            put: "/api/v1/cameras/{id}",
            body: "*"
        };
    }

    rpc GetCamerasList(google.protobuf.Empty) returns (GetCamerasListResponse) {
        option (google.api.http).get = "/api/v1/cameras";
    }

    rpc CreateStream(CreateCameraStreamRequest) returns (Stream) {
        option (google.api.http) = {
            post: "/api/v1/cameras/{camera_id}/streams"
            body: "*"
        };
    }

    rpc GetCameraStreamsList(GetCameraStreamsListRequest) returns (Streams) {
        option (google.api.http) = {
            get: "/api/v1/cameras/{camera_id}/streams"
        };
    }

    rpc CompleteStream(CompleteCameraStreamRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/cameras/{camera_id}/streams/{stream_id}/complete"
        };
    }

    rpc RemoteControl(stream UpdateStateCameraRequest) returns (stream State) {
    }
}

message RegisterCameraRequest {
    string id = 1 [(validator.field) = {regex: "^[a-fA-F0-9]{12}", human_error: "wrong format"}];
    string name = 2 [(validator.field) = {string_not_empty: true, human_error: "must not be an empty string"}];
}

message GetCameraRequest {
    string id = 1;
}

message DeleteCameraRequest {
    string id = 1;
}

message UpdateCameraRequest {
    string id = 1;
    string name = 2 [(validator.field) = {string_not_empty: true, human_error: "must not be an empty string"}];
}

message GetCamerasListResponse {
    repeated CameraItemResponse items = 1;
}

message CameraItemResponse {
    string id = 1;
    string name = 2;
    google.protobuf.Timestamp registered_at = 4 [(gogoproto.stdtime) = true];
    bool is_connected = 5;
    bool is_on_air = 6;
    string preview_image_url = 7;
    Output.OutputType output_type = 8;
}

message Camera {
    string id = 1;
    string name = 2 [(gogoproto.moretags) = "gorm:\"size:255\""];

    uint32 owner_id = 3 [(gogoproto.moretags) = "gorm:\"index\""];
    google.protobuf.Timestamp registered_at = 4 [(gogoproto.stdtime) = true];

    bool is_connected = 5;
    bool is_on_air = 6;

    Stream stream = 7;
    State state = 8;
}

enum Projection {
    EQUIRECTANGULAR = 0;
    SMOOTH_EQUIRECTANGULAR = 1;
}

enum StereoMode {
    MONO = 0;
    TB = 1;
}

enum IngestionType {
    RTMP = 0;
}

message CreateCameraStreamRequest {
    string camera_id = 1 [(validator.field) = {regex: "^[a-fA-F0-9]{12}", human_error: "wrong format"}];
    StereoMode stereo_mode = 2;
    Projection projection = 3;
    uint32 framerate = 4 [(validator.field) = {int_gt: 19, int_lt: 31, human_error: "must be between 20 and 30 fps"}];
    uint32 bitrate = 5 [(validator.field) = {int_gt: 9999, int_lt: 50001, human_error: "must be between 10.000K and 50.000K"}];
    string resolution = 6;
    IngestionType ingestion_type = 7;
}

message GetCameraStreamsListRequest {
    string camera_id = 1;
    bool only_active = 2;
}

message CompleteCameraStreamRequest {
    string camera_id = 1;
    uint32 stream_id = 2;
}

message Stream {
    uint32 id = 1 [(gogoproto.moretags)="gorm:\"primary_key,AUTO_INCREMENT\""];
    string camera_id = 2 [(gogoproto.moretags) = "gorm:\"index\""];
    uint32 owner_id = 3 [(gogoproto.moretags) = "gorm:\"index\""];

    google.protobuf.Timestamp started_at = 4 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp finished_at = 5 [(gogoproto.stdtime) = true];

    StereoMode stereo_mode = 6;
    Projection projection = 7;
    uint32 framerate = 8;
    uint32 bitrate = 9;
    string resolution = 10;

    enum Status {
        OFF_AIR = 0;
        PREVIEW = 1;
        ON_AIR = 2;
    }
    Status status = 11;

    IngestionType ingestion_type = 12;
    string ingestion_stream_name = 13;
    string ingestion_address = 14;
    string ingestion_backup_address = 15;

    string preview_image_url = 16;
    string preview_video_url = 18;

    bool is_active = 17;
}

message Streams {
    repeated Stream items = 1;
}

message UpdateStateCameraRequest {
    string camera_id = 1 [(validator.field) = {regex: "^[a-fA-F0-9]{12}", human_error: "wrong format"}];
    State state = 2;
}