syntax = "proto3";
package proto;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "proto";
option optimize_for = SPEED;

service UserProfileService {
  rpc GetOAuth2Token(OAuth2TokenRequest) returns (OAuth2TokenResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/token"
    };
  }

  rpc Get(UserProfileRequest) returns (UserProfileResponse) {
    option (google.api.http) = {
      get: "/api/v1/user"
    };
  }

  rpc GetUserByID(GetUserByIDRequest) returns (UserProfileResponse) {
    option (google.api.http) = {
      get: "/api/private/v1/users/{user_id}"
    };
  }
}

message UserCaps {
  uint32 events_in_process_max_count = 1 [(gogoproto.moretags) = "db:\"events_in_process_max_count\""];
  uint32 file_upload_max_size = 2 [(gogoproto.moretags) = "db:\"file_upload_max_size\""];
  uint32 files_event_max_count = 3 [(gogoproto.moretags) = "db:\"files_event_max_count\""];
  uint32 platforms_event_max_count = 4 [(gogoproto.moretags) = "db:\"platforms_event_max_count\""];
  bool is_viewporting_enabled = 5 [(gogoproto.moretags) = "db:\"is_viewporting_enabled\""];
  repeated string platform_ids = 6;
}

message UserProfileRequest {
  oneof t {
    string token = 1;
    string bearer = 2;
  }
}

message GetUserByIDRequest {
  uint32 user_id = 1;
}

message UserProfileResponse {
  uint32 id = 1 [(gogoproto.customname) = "ID"];
  string name = 2;
  string surname = 3;
  string display_name = 4;
  string email = 5;
  string company_name = 6;
  bool is_staff = 7;
  string help_info = 8;
  string credits = 9;
  UserCaps caps = 10;
}

message OAuth2TokenRequest {
  uint32 user_id = 1;
  string app_id = 2;
}

message OAuth2TokenResponse {
  uint32 user_id = 1;
  string token = 2;
}