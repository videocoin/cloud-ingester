syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package proto;
option go_package = "proto";
option optimize_for = SPEED;

service CameraCloudInternalService {
    rpc GetCamera(InternalCameraRequest) returns (InternalCameraResponse) {}
    rpc GetCameras(InternalCameraListRequest) returns (InternalCameraListResponse) {}
    rpc GetActiveStreams(InternalStreamListRequest) returns (InternalStreamListResponse) {}
    rpc StartLiveStreaming(InternalLiveStreamingRequest) returns (InternalLiveStreamingResponse) {}
    rpc StopLiveStreaming(InternalLiveStreamingRequest) returns (InternalLiveStreamingResponse) {}
    rpc MarkCameraAsOnAir(InternalCameraRequest) returns (InternalCameraResponse) {}
    rpc MarkCameraAsOffAir(InternalCameraRequest) returns (InternalCameraResponse) {}
}

message InternalCameraRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
    uint32 owner_id = 2 [(gogoproto.customname) = "OwnerID"];
}

message InternalCameraResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
    bool is_on_air = 3;
}

message InternalCameraListRequest {
    uint32 owner_id = 1 [(gogoproto.customname) = "OwnerID"];
}

message InternalCameraListResponse {
    repeated InternalCameraResponse items = 1;
}

message InternalStreamResponse {
    uint32 id = 1 [(gogoproto.customname) = "ID"];
    string camera_id = 2 [(gogoproto.customname) = "CameraID"];
}

message InternalStreamListRequest {
    uint32 owner_id = 1 [(gogoproto.customname) = "OwnerID"];
    string camera_id = 2 [(gogoproto.customname) = "CameraID"];
}

message InternalStreamListResponse {
    repeated InternalStreamResponse items = 1;
}

message InternalLiveStreamingRequest {
    uint32 owner_id = 1 [(gogoproto.customname) = "OwnerID"];
    string camera_id = 2 [(gogoproto.customname) = "CameraID"];
}

message InternalLiveStreamingResponse {}
