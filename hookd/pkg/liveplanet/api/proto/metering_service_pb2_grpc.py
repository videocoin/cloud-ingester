# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from liveplanet.api.proto import metering_service_pb2 as metering__service__pb2


class MeteringServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetResourceUsageGroupByEvents = channel.unary_unary(
        '/proto.MeteringService/GetResourceUsageGroupByEvents',
        request_serializer=metering__service__pb2.ResourceUsageRequest.SerializeToString,
        response_deserializer=metering__service__pb2.ResourceUsagesResponse.FromString,
        )
    self.GetResourceUsageByEvent = channel.unary_unary(
        '/proto.MeteringService/GetResourceUsageByEvent',
        request_serializer=metering__service__pb2.ResourceUsageRequest.SerializeToString,
        response_deserializer=metering__service__pb2.ResourceUsageResponse.FromString,
        )
    self.GetResourceUsage = channel.unary_unary(
        '/proto.MeteringService/GetResourceUsage',
        request_serializer=metering__service__pb2.ResourceUsageRequest.SerializeToString,
        response_deserializer=metering__service__pb2.ResourceUsageResponse.FromString,
        )


class MeteringServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetResourceUsageGroupByEvents(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetResourceUsageByEvent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetResourceUsage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MeteringServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetResourceUsageGroupByEvents': grpc.unary_unary_rpc_method_handler(
          servicer.GetResourceUsageGroupByEvents,
          request_deserializer=metering__service__pb2.ResourceUsageRequest.FromString,
          response_serializer=metering__service__pb2.ResourceUsagesResponse.SerializeToString,
      ),
      'GetResourceUsageByEvent': grpc.unary_unary_rpc_method_handler(
          servicer.GetResourceUsageByEvent,
          request_deserializer=metering__service__pb2.ResourceUsageRequest.FromString,
          response_serializer=metering__service__pb2.ResourceUsageResponse.SerializeToString,
      ),
      'GetResourceUsage': grpc.unary_unary_rpc_method_handler(
          servicer.GetResourceUsage,
          request_deserializer=metering__service__pb2.ResourceUsageRequest.FromString,
          response_serializer=metering__service__pb2.ResourceUsageResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proto.MeteringService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
