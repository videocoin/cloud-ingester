// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: camera_cloud_internal.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		camera_cloud_internal.proto

	It has these top-level messages:
		InternalCameraRequest
		InternalCameraResponse
		InternalCameraListRequest
		InternalCameraListResponse
		InternalStreamResponse
		InternalStreamListRequest
		InternalStreamListResponse
		InternalLiveStreamingRequest
		InternalLiveStreamingResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type InternalCameraRequest struct {
	ID      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerID uint32 `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *InternalCameraRequest) Reset()         { *m = InternalCameraRequest{} }
func (m *InternalCameraRequest) String() string { return proto1.CompactTextString(m) }
func (*InternalCameraRequest) ProtoMessage()    {}
func (*InternalCameraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{0}
}

func (m *InternalCameraRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InternalCameraRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type InternalCameraResponse struct {
	ID      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOnAir bool   `protobuf:"varint,3,opt,name=is_on_air,json=isOnAir,proto3" json:"is_on_air,omitempty"`
}

func (m *InternalCameraResponse) Reset()         { *m = InternalCameraResponse{} }
func (m *InternalCameraResponse) String() string { return proto1.CompactTextString(m) }
func (*InternalCameraResponse) ProtoMessage()    {}
func (*InternalCameraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{1}
}

func (m *InternalCameraResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InternalCameraResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InternalCameraResponse) GetIsOnAir() bool {
	if m != nil {
		return m.IsOnAir
	}
	return false
}

type InternalCameraListRequest struct {
	OwnerID uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *InternalCameraListRequest) Reset()         { *m = InternalCameraListRequest{} }
func (m *InternalCameraListRequest) String() string { return proto1.CompactTextString(m) }
func (*InternalCameraListRequest) ProtoMessage()    {}
func (*InternalCameraListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{2}
}

func (m *InternalCameraListRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type InternalCameraListResponse struct {
	Items []*InternalCameraResponse `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InternalCameraListResponse) Reset()         { *m = InternalCameraListResponse{} }
func (m *InternalCameraListResponse) String() string { return proto1.CompactTextString(m) }
func (*InternalCameraListResponse) ProtoMessage()    {}
func (*InternalCameraListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{3}
}

func (m *InternalCameraListResponse) GetItems() []*InternalCameraResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

type InternalStreamResponse struct {
	ID       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CameraID string `protobuf:"bytes,2,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (m *InternalStreamResponse) Reset()         { *m = InternalStreamResponse{} }
func (m *InternalStreamResponse) String() string { return proto1.CompactTextString(m) }
func (*InternalStreamResponse) ProtoMessage()    {}
func (*InternalStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{4}
}

func (m *InternalStreamResponse) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InternalStreamResponse) GetCameraID() string {
	if m != nil {
		return m.CameraID
	}
	return ""
}

type InternalStreamListRequest struct {
	OwnerID  uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CameraID string `protobuf:"bytes,2,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (m *InternalStreamListRequest) Reset()         { *m = InternalStreamListRequest{} }
func (m *InternalStreamListRequest) String() string { return proto1.CompactTextString(m) }
func (*InternalStreamListRequest) ProtoMessage()    {}
func (*InternalStreamListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{5}
}

func (m *InternalStreamListRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *InternalStreamListRequest) GetCameraID() string {
	if m != nil {
		return m.CameraID
	}
	return ""
}

type InternalStreamListResponse struct {
	Items []*InternalStreamResponse `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InternalStreamListResponse) Reset()         { *m = InternalStreamListResponse{} }
func (m *InternalStreamListResponse) String() string { return proto1.CompactTextString(m) }
func (*InternalStreamListResponse) ProtoMessage()    {}
func (*InternalStreamListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{6}
}

func (m *InternalStreamListResponse) GetItems() []*InternalStreamResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

type InternalLiveStreamingRequest struct {
	OwnerID  uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CameraID string `protobuf:"bytes,2,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (m *InternalLiveStreamingRequest) Reset()         { *m = InternalLiveStreamingRequest{} }
func (m *InternalLiveStreamingRequest) String() string { return proto1.CompactTextString(m) }
func (*InternalLiveStreamingRequest) ProtoMessage()    {}
func (*InternalLiveStreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{7}
}

func (m *InternalLiveStreamingRequest) GetOwnerID() uint32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *InternalLiveStreamingRequest) GetCameraID() string {
	if m != nil {
		return m.CameraID
	}
	return ""
}

type InternalLiveStreamingResponse struct {
}

func (m *InternalLiveStreamingResponse) Reset()         { *m = InternalLiveStreamingResponse{} }
func (m *InternalLiveStreamingResponse) String() string { return proto1.CompactTextString(m) }
func (*InternalLiveStreamingResponse) ProtoMessage()    {}
func (*InternalLiveStreamingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCameraCloudInternal, []int{8}
}

func init() {
	proto1.RegisterType((*InternalCameraRequest)(nil), "proto.InternalCameraRequest")
	proto1.RegisterType((*InternalCameraResponse)(nil), "proto.InternalCameraResponse")
	proto1.RegisterType((*InternalCameraListRequest)(nil), "proto.InternalCameraListRequest")
	proto1.RegisterType((*InternalCameraListResponse)(nil), "proto.InternalCameraListResponse")
	proto1.RegisterType((*InternalStreamResponse)(nil), "proto.InternalStreamResponse")
	proto1.RegisterType((*InternalStreamListRequest)(nil), "proto.InternalStreamListRequest")
	proto1.RegisterType((*InternalStreamListResponse)(nil), "proto.InternalStreamListResponse")
	proto1.RegisterType((*InternalLiveStreamingRequest)(nil), "proto.InternalLiveStreamingRequest")
	proto1.RegisterType((*InternalLiveStreamingResponse)(nil), "proto.InternalLiveStreamingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CameraCloudInternalService service

type CameraCloudInternalServiceClient interface {
	GetCamera(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error)
	GetCameras(ctx context.Context, in *InternalCameraListRequest, opts ...grpc.CallOption) (*InternalCameraListResponse, error)
	GetActiveStreams(ctx context.Context, in *InternalStreamListRequest, opts ...grpc.CallOption) (*InternalStreamListResponse, error)
	StartLiveStreaming(ctx context.Context, in *InternalLiveStreamingRequest, opts ...grpc.CallOption) (*InternalLiveStreamingResponse, error)
	StopLiveStreaming(ctx context.Context, in *InternalLiveStreamingRequest, opts ...grpc.CallOption) (*InternalLiveStreamingResponse, error)
	MarkCameraAsOnAir(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error)
	MarkCameraAsOffAir(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error)
}

type cameraCloudInternalServiceClient struct {
	cc *grpc.ClientConn
}

func NewCameraCloudInternalServiceClient(cc *grpc.ClientConn) CameraCloudInternalServiceClient {
	return &cameraCloudInternalServiceClient{cc}
}

func (c *cameraCloudInternalServiceClient) GetCamera(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error) {
	out := new(InternalCameraResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/GetCamera", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) GetCameras(ctx context.Context, in *InternalCameraListRequest, opts ...grpc.CallOption) (*InternalCameraListResponse, error) {
	out := new(InternalCameraListResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/GetCameras", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) GetActiveStreams(ctx context.Context, in *InternalStreamListRequest, opts ...grpc.CallOption) (*InternalStreamListResponse, error) {
	out := new(InternalStreamListResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/GetActiveStreams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) StartLiveStreaming(ctx context.Context, in *InternalLiveStreamingRequest, opts ...grpc.CallOption) (*InternalLiveStreamingResponse, error) {
	out := new(InternalLiveStreamingResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/StartLiveStreaming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) StopLiveStreaming(ctx context.Context, in *InternalLiveStreamingRequest, opts ...grpc.CallOption) (*InternalLiveStreamingResponse, error) {
	out := new(InternalLiveStreamingResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/StopLiveStreaming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) MarkCameraAsOnAir(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error) {
	out := new(InternalCameraResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/MarkCameraAsOnAir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraCloudInternalServiceClient) MarkCameraAsOffAir(ctx context.Context, in *InternalCameraRequest, opts ...grpc.CallOption) (*InternalCameraResponse, error) {
	out := new(InternalCameraResponse)
	err := grpc.Invoke(ctx, "/proto.CameraCloudInternalService/MarkCameraAsOffAir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CameraCloudInternalService service

type CameraCloudInternalServiceServer interface {
	GetCamera(context.Context, *InternalCameraRequest) (*InternalCameraResponse, error)
	GetCameras(context.Context, *InternalCameraListRequest) (*InternalCameraListResponse, error)
	GetActiveStreams(context.Context, *InternalStreamListRequest) (*InternalStreamListResponse, error)
	StartLiveStreaming(context.Context, *InternalLiveStreamingRequest) (*InternalLiveStreamingResponse, error)
	StopLiveStreaming(context.Context, *InternalLiveStreamingRequest) (*InternalLiveStreamingResponse, error)
	MarkCameraAsOnAir(context.Context, *InternalCameraRequest) (*InternalCameraResponse, error)
	MarkCameraAsOffAir(context.Context, *InternalCameraRequest) (*InternalCameraResponse, error)
}

func RegisterCameraCloudInternalServiceServer(s *grpc.Server, srv CameraCloudInternalServiceServer) {
	s.RegisterService(&_CameraCloudInternalService_serviceDesc, srv)
}

func _CameraCloudInternalService_GetCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).GetCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/GetCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).GetCamera(ctx, req.(*InternalCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_GetCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCameraListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).GetCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/GetCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).GetCameras(ctx, req.(*InternalCameraListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_GetActiveStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalStreamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).GetActiveStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/GetActiveStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).GetActiveStreams(ctx, req.(*InternalStreamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_StartLiveStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLiveStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).StartLiveStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/StartLiveStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).StartLiveStreaming(ctx, req.(*InternalLiveStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_StopLiveStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLiveStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).StopLiveStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/StopLiveStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).StopLiveStreaming(ctx, req.(*InternalLiveStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_MarkCameraAsOnAir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).MarkCameraAsOnAir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/MarkCameraAsOnAir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).MarkCameraAsOnAir(ctx, req.(*InternalCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraCloudInternalService_MarkCameraAsOffAir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraCloudInternalServiceServer).MarkCameraAsOffAir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CameraCloudInternalService/MarkCameraAsOffAir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraCloudInternalServiceServer).MarkCameraAsOffAir(ctx, req.(*InternalCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraCloudInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CameraCloudInternalService",
	HandlerType: (*CameraCloudInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCamera",
			Handler:    _CameraCloudInternalService_GetCamera_Handler,
		},
		{
			MethodName: "GetCameras",
			Handler:    _CameraCloudInternalService_GetCameras_Handler,
		},
		{
			MethodName: "GetActiveStreams",
			Handler:    _CameraCloudInternalService_GetActiveStreams_Handler,
		},
		{
			MethodName: "StartLiveStreaming",
			Handler:    _CameraCloudInternalService_StartLiveStreaming_Handler,
		},
		{
			MethodName: "StopLiveStreaming",
			Handler:    _CameraCloudInternalService_StopLiveStreaming_Handler,
		},
		{
			MethodName: "MarkCameraAsOnAir",
			Handler:    _CameraCloudInternalService_MarkCameraAsOnAir_Handler,
		},
		{
			MethodName: "MarkCameraAsOffAir",
			Handler:    _CameraCloudInternalService_MarkCameraAsOffAir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera_cloud_internal.proto",
}

func (m *InternalCameraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalCameraRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.OwnerID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(m.OwnerID))
	}
	return i, nil
}

func (m *InternalCameraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalCameraResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsOnAir {
		dAtA[i] = 0x18
		i++
		if m.IsOnAir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InternalCameraListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalCameraListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(m.OwnerID))
	}
	return i, nil
}

func (m *InternalCameraListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalCameraListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCameraCloudInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InternalStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(m.ID))
	}
	if len(m.CameraID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.CameraID)))
		i += copy(dAtA[i:], m.CameraID)
	}
	return i, nil
}

func (m *InternalStreamListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalStreamListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(m.OwnerID))
	}
	if len(m.CameraID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.CameraID)))
		i += copy(dAtA[i:], m.CameraID)
	}
	return i, nil
}

func (m *InternalStreamListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalStreamListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCameraCloudInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InternalLiveStreamingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalLiveStreamingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(m.OwnerID))
	}
	if len(m.CameraID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCameraCloudInternal(dAtA, i, uint64(len(m.CameraID)))
		i += copy(dAtA[i:], m.CameraID)
	}
	return i, nil
}

func (m *InternalLiveStreamingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalLiveStreamingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintCameraCloudInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InternalCameraRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 1 + sovCameraCloudInternal(uint64(m.OwnerID))
	}
	return n
}

func (m *InternalCameraResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	if m.IsOnAir {
		n += 2
	}
	return n
}

func (m *InternalCameraListRequest) Size() (n int) {
	var l int
	_ = l
	if m.OwnerID != 0 {
		n += 1 + sovCameraCloudInternal(uint64(m.OwnerID))
	}
	return n
}

func (m *InternalCameraListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCameraCloudInternal(uint64(l))
		}
	}
	return n
}

func (m *InternalStreamResponse) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCameraCloudInternal(uint64(m.ID))
	}
	l = len(m.CameraID)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	return n
}

func (m *InternalStreamListRequest) Size() (n int) {
	var l int
	_ = l
	if m.OwnerID != 0 {
		n += 1 + sovCameraCloudInternal(uint64(m.OwnerID))
	}
	l = len(m.CameraID)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	return n
}

func (m *InternalStreamListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCameraCloudInternal(uint64(l))
		}
	}
	return n
}

func (m *InternalLiveStreamingRequest) Size() (n int) {
	var l int
	_ = l
	if m.OwnerID != 0 {
		n += 1 + sovCameraCloudInternal(uint64(m.OwnerID))
	}
	l = len(m.CameraID)
	if l > 0 {
		n += 1 + l + sovCameraCloudInternal(uint64(l))
	}
	return n
}

func (m *InternalLiveStreamingResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovCameraCloudInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCameraCloudInternal(x uint64) (n int) {
	return sovCameraCloudInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InternalCameraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalCameraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalCameraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalCameraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalCameraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalCameraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnAir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnAir = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalCameraListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalCameraListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalCameraListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalCameraListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalCameraListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalCameraListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InternalCameraResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CameraID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalStreamListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalStreamListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalStreamListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CameraID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalStreamListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalStreamListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalStreamListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InternalStreamResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalLiveStreamingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalLiveStreamingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalLiveStreamingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CameraID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalLiveStreamingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalLiveStreamingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalLiveStreamingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCameraCloudInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCameraCloudInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCameraCloudInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCameraCloudInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCameraCloudInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCameraCloudInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCameraCloudInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCameraCloudInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCameraCloudInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCameraCloudInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("camera_cloud_internal.proto", fileDescriptorCameraCloudInternal) }

var fileDescriptorCameraCloudInternal = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x8e, 0xae, 0xcd, 0x19, 0x93, 0x98, 0x25, 0xa6, 0x2e, 0x6c, 0x6d, 0x09, 0x08,
	0x95, 0x0b, 0x3a, 0x69, 0x7b, 0x82, 0x7e, 0x48, 0x23, 0x68, 0x68, 0x22, 0xbd, 0x40, 0xc0, 0x45,
	0xe6, 0x26, 0x6e, 0xb1, 0x58, 0xec, 0xce, 0x71, 0xc7, 0x1b, 0xf0, 0x0c, 0x3c, 0x12, 0x97, 0x3c,
	0x41, 0x85, 0xc2, 0x8b, 0xa0, 0xd9, 0x6d, 0xd6, 0xac, 0x69, 0x05, 0x4c, 0xbb, 0x8a, 0x3f, 0x8e,
	0x7f, 0xe7, 0xfc, 0xff, 0xc7, 0x31, 0x3c, 0x09, 0x48, 0x44, 0x25, 0xf1, 0x83, 0x0b, 0x31, 0x09,
	0x7d, 0xc6, 0x15, 0x95, 0x9c, 0x5c, 0xb4, 0xc6, 0x52, 0x28, 0x81, 0x4b, 0xfa, 0x63, 0xbf, 0x1a,
	0x31, 0xf5, 0x79, 0x32, 0x68, 0x05, 0x22, 0x3a, 0x1c, 0x89, 0x91, 0x38, 0xd4, 0xcb, 0x83, 0xc9,
	0x50, 0xcf, 0xf4, 0x44, 0x8f, 0xcc, 0x29, 0xe7, 0x3d, 0x3c, 0x76, 0x67, 0x9c, 0xae, 0x86, 0x7b,
	0xf4, 0x72, 0x42, 0x63, 0x85, 0x77, 0xa1, 0xc8, 0xc2, 0x2a, 0x6a, 0xa0, 0xa6, 0xd5, 0xd9, 0x4c,
	0xa6, 0xf5, 0xa2, 0xdb, 0xf3, 0x8a, 0x2c, 0xc4, 0x2f, 0xa0, 0x22, 0xbe, 0x72, 0x2a, 0x7d, 0x16,
	0x56, 0x8b, 0x0d, 0xd4, 0xdc, 0xee, 0x6c, 0x25, 0xd3, 0x7a, 0xf9, 0xec, 0x7a, 0xcd, 0xed, 0x79,
	0x65, 0xbd, 0xe9, 0x86, 0xce, 0x39, 0xec, 0xde, 0x06, 0xc7, 0x63, 0xc1, 0x63, 0xba, 0x92, 0x8c,
	0xe1, 0x01, 0x27, 0x11, 0xd5, 0x54, 0xcb, 0xd3, 0x63, 0x6c, 0x83, 0xc5, 0x62, 0x5f, 0x70, 0x9f,
	0x30, 0x59, 0xdd, 0x68, 0xa0, 0x66, 0xc5, 0x2b, 0xb3, 0xf8, 0x8c, 0xb7, 0x99, 0x74, 0xba, 0xb0,
	0x97, 0xcd, 0x70, 0xca, 0x62, 0x35, 0x2f, 0x7f, 0xb1, 0x4c, 0xb4, 0xa6, 0xcc, 0x77, 0x60, 0xe7,
	0x41, 0x66, 0xa5, 0x1e, 0x43, 0x89, 0x29, 0x1a, 0xc5, 0x55, 0xd4, 0xd8, 0x68, 0x6e, 0x1d, 0x1d,
	0x18, 0xd3, 0x5a, 0xf9, 0xc2, 0x3c, 0x13, 0xeb, 0x7c, 0xba, 0x51, 0xde, 0x57, 0x92, 0x92, 0x28,
	0x47, 0xf9, 0x76, 0x46, 0xf9, 0x4b, 0xb0, 0x66, 0x9d, 0x9d, 0x99, 0x6a, 0x75, 0x1e, 0x26, 0xd3,
	0x7a, 0xc5, 0xf0, 0xdd, 0x9e, 0x57, 0x31, 0xdb, 0x6e, 0xe8, 0xf0, 0x1b, 0xd1, 0x06, 0xfe, 0x1f,
	0xa2, 0xff, 0x25, 0xdf, 0x82, 0x3f, 0x8b, 0xf9, 0xfe, 0xce, 0x9f, 0xac, 0xfc, 0xb9, 0x3f, 0x97,
	0xb0, 0x3f, 0x0f, 0x38, 0x65, 0x57, 0xd4, 0x04, 0x31, 0x3e, 0xba, 0x47, 0x15, 0x75, 0x38, 0x58,
	0x91, 0xd2, 0x94, 0x76, 0xf4, 0xad, 0x04, 0xb6, 0x39, 0xd7, 0xbd, 0xfe, 0xb7, 0x52, 0x01, 0x54,
	0x5e, 0xb1, 0x80, 0xe2, 0x37, 0x60, 0x9d, 0x50, 0x65, 0x02, 0xf0, 0xfe, 0x8a, 0x5b, 0xa0, 0xab,
	0xb7, 0xd7, 0xdf, 0x11, 0xa7, 0x80, 0xfb, 0x00, 0x29, 0x2b, 0xc6, 0x8d, 0xdc, 0xf0, 0x85, 0xa6,
	0xda, 0x4f, 0xd7, 0x44, 0xa4, 0xd0, 0x0f, 0xf0, 0xe8, 0x84, 0xaa, 0x76, 0xa0, 0x52, 0x75, 0xcb,
	0xe8, 0xa5, 0xfb, 0xb2, 0x84, 0x5e, 0xee, 0xb0, 0x53, 0xc0, 0x04, 0x70, 0x5f, 0x11, 0xa9, 0x32,
	0xc6, 0xe1, 0x67, 0xb7, 0x8e, 0xe6, 0x75, 0xd2, 0x7e, 0xbe, 0x3e, 0x28, 0x4d, 0x71, 0x0e, 0x3b,
	0x7d, 0x25, 0xc6, 0xf7, 0x98, 0xc1, 0x83, 0x9d, 0xb7, 0x44, 0x7e, 0x31, 0xde, 0xb5, 0xcd, 0x03,
	0x72, 0xf7, 0x46, 0xe2, 0x0c, 0x73, 0x38, 0xbc, 0x3b, 0xb4, 0xb3, 0xf7, 0x23, 0xa9, 0xa1, 0x9f,
	0x49, 0x0d, 0xfd, 0x4a, 0x6a, 0xe8, 0xfb, 0xef, 0x5a, 0xe1, 0x35, 0xfa, 0x68, 0x5e, 0xf6, 0xc1,
	0xa6, 0xfe, 0x1c, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x9b, 0x28, 0x47, 0x06, 0x06, 0x00,
	0x00,
}
